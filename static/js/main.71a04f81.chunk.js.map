{"version":3,"sources":["Components/Alert.js","Components/About.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","style","height","alert","className","concat","type","role","msg","About","Fragment","color","mode","id","backgroundColor","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","react_router_dom","to","title","aria-label","aria-current","aboutTxt","placeholder","onClick","handleModeChange","htmlFor","btnText","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","filter","element","defaultProps","App","setMode","_useState3","_useState4","setBtnText","_useState5","_useState6","setAlert","message","setTimeout","document","body","Components_Alert","react_router","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.71a04f81.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n        <div style={{height:\"50px\"}}>\r\n        {props.alert && <div>\r\n             <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type} : </strong> {props.alert.msg}\r\n            </div>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: \"black\",\r\n    //     backgroundColor: \"white\",\r\n    // });\r\n\r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    // const handleModeChange = () => {\r\n    //     if (myStyle.color === 'black') {\r\n    //         setMyStyle({\r\n    //             color: \"white\",\r\n    //             backgroundColor: \"black\",\r\n    //             border: \"1px solid white\",\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\");\r\n    //     }\r\n\r\n    //     else {\r\n    //         setMyStyle({\r\n    //             color: \"black\",\r\n    //             backgroundColor: \"white\",\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\");\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <div className='container my-5' style={{color:props.mode===\"light\"?\"black\":\"white\"}}>\r\n                <h2 className='my-2'>About Us</h2>\r\n               \r\n                <div className=\"accordion my-2\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\" style={{backgroundColor:props.mode === \"light\"?\"white\":\"grey\", color:props.mode === \"light\"?\"black\":\"white\"}}>\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={{backgroundColor:props.mode === \"light\"?\"white\":\"grey\", color:props.mode === \"light\"?\"black\":\"white\"}}>\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body my-2\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={{backgroundColor:props.mode === \"light\"?\"white\":\"grey\", color:props.mode === \"light\"?\"black\":\"white\"}}>\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={{backgroundColor:props.mode === \"light\"?\"white\":\"grey\", color:props.mode === \"light\"?\"black\":\"white\"}}>\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body my-2\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={{backgroundColor:props.mode === \"light\"?\"white\":\"grey\", color:props.mode === \"light\"?\"black\":\"white\"}}>\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={{backgroundColor:props.mode === \"light\"?\"white\":\"grey\", color:props.mode === \"light\"?\"black\":\"white\"}}>\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body my-2\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutTxt}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <form className=\"d-flex mx-2\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-info\" type=\"submit\">Search</button>\r\n                    </form>\r\n\r\n                    <div className={`form-check form-switch text-${props.mode === \"light\"?\"dark\":\"light\"}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\"  onClick={props.handleModeChange} id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.btnText}</label>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutTxt: PropTypes.string.isRequired\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: 'TextUtilssss',\r\n    aboutTxt: 'About'\r\n}\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"Upper Case Btn Clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setText('');\r\n        props.showAlert(\"Cleared Text\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div className=\"container my-5\" style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n                <h2>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"textId\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === \"light\" ? \"white\" : \"grey\", color: props.mode === \"light\" ? \"black\" : \"white\" }} rows=\"6\"></textarea>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-1\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert To LowerCase</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container my-2\" style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n                <h2>You Text Summary</h2>\r\n                <p> {text.split(\" \").filter((element) => { return element.length !== 0 }).length} words and {text.length} Character </p>\r\n                <p> {0.008 * text.split(' ').filter((element) => { return element.length !== 0 }).length} Minutes to read </p>\r\n\r\n                <h3>Preview</h3>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading: PropTypes.string\r\n}\r\n\r\n\r\n","import React, {useState } from 'react';\nimport './App.css';\nimport Alert from './Components/Alert';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const handleModeChange = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setBtnText(\"Enable Light Mode\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark Mode Enable\", \"success\");\n    }\n\n    else {\n      setMode(\"light\");\n      setBtnText(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode Enable\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    <Router>\n          <Navbar title=\"Chithraksh TextUtils\" aboutTxt=\"About\" mode={mode} handleModeChange={handleModeChange} btnText={btnText} />\n          <Alert alert={alert} />\n          {/* <TextForm heading=\"Enter The Text\" mode={mode} showAlert={showAlert} /> */}\n          {/* <About/> */}\n        <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/about\">\n            <About  handleModeChange={handleModeChange} mode={mode} />\n          </Route>\n\n          <Route exact path=\"/\">\n          <TextForm heading=\"Enter The Text\" mode={mode} showAlert={showAlert} />\n          </Route>\n        </Switch>\n           \n        </div>\n        </Router>\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}